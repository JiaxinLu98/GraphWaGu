import { ForceDirected } from './force_directed';
export declare class Renderer {
    device: GPUDevice;
    forceDirected: ForceDirected | null;
    nodeBindGroup: GPUBindGroup | null;
    edgeBindGroup: GPUBindGroup | null;
    uniform2DBuffer: GPUBuffer | null;
    nodeDataBuffer: GPUBuffer | null;
    edgeDataBuffer: GPUBuffer | null;
    sourceEdgeDataBuffer: GPUBuffer | null;
    targetEdgeDataBuffer: GPUBuffer | null;
    viewBoxBuffer: GPUBuffer | null;
    nodePipeline: GPURenderPipeline | null;
    edgePipeline: GPURenderPipeline | null;
    nodeLength: number;
    edgeLength: number;
    nodeToggle: boolean;
    edgeToggle: boolean;
    canvasSize: [number, number] | null;
    idealLength: number;
    coolingFactor: number;
    iterRef: React.RefObject<HTMLLabelElement>;
    frame: (() => void) | undefined;
    edgeList: Array<number>;
    mortonCodeBuffer: GPUBuffer | null;
    energy: number;
    theta: number;
    canvasRef: any;
    viewExtreme: [number, number, number, number];
    iterationCount: number;
    context: GPUCanvasContext | null;
    edgePositionBuffer: GPUBuffer | null;
    nodePositionBuffer: GPUBuffer | null;
    constructor(device: GPUDevice, canvasRef: React.RefObject<HTMLCanvasElement>, iterRef: React.RefObject<HTMLLabelElement>);
    takeScreenshot(): Promise<void>;
    setNodeEdgeData(nodeData: Array<number>, edgeData: Array<number>, sourceEdges: Array<number>, targetEdges: Array<number>): void;
    setCoolingFactor(value: number): void;
    setIdealLength(value: number): void;
    setEnergy(value: number): void;
    setIterationCount(value: number): void;
    setTheta(value: number): void;
    runForceDirected(): Promise<void>;
    stopForceDirected(): Promise<void>;
    toggleNodeLayer(): void;
    toggleEdgeLayer(): void;
    setController(): void;
}
